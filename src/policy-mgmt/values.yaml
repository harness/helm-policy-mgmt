# Default values for policy-mgmt.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  loadbalancerURL: "http://test/"
  airgap: "false"

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

config:
  httpBind: '3000'
  debug: 'true'
  databaseDatasource: 'host=10.52.80.41 user=DBUSER password=DBPASSWORD dbname=policy-mgmt sslmode=disable'
  enableAuditTrail: 'true'
  enableEntitlementsJob: 'true'
  enableSegmentAnalytics: 'true'
  eventsFrameworkRedisUrl: 'harness-redis-master:6379'
  eventsFrameworkEnvNamespace: 'prod'
  eventsFrameworkRedisSslEnabled: 'true'
  eventsFrameworkRedisSslCaPath: '/opt/harness/svc/redis_labs_ca.pem'
  gitxEnabled: 'false'
  gitxAuthority: 'manager-grpc-app.harness.io'
  gitxUrl: 'https://nginx-ingress-controller.ingress-nginx.svc.cluster.local'
  appdynamicsEnabled: 'true'
  appdynamicsAccount: 'harness-prod'
  appdynamicsAppName: 'Prod'
  appdynamicsTierName: 'policy-mgmt'
  appdynamicsControllerHost: 'harness-prod.saas.appdynamics.com'
  appdynamicsControllerPort: '443'

policyMgmtSecrets:
  ngManagerJwtSecret:
    name: harness-pm-secrets
    key: ngManagerJwtSecret
  appdynamicsAccessKey:
    name: harness-pm-secrets
    key: appdynamicsAccessKey
  eventsFrameworkRedisPassword:
    name: harness-pm-secrets
    key: eventsFrameworkRedisPassword
  databaesPassword:
    name: harness-pm-secrets
    key: databasePassword
  databaseUser:
    name: harness-pm-secrets
    key: databaseUser


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
