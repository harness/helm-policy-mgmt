apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-mgmt
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "policy-mgmt.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end}}
  selector:
    matchLabels:
      {{- include "policy-mgmt.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "policy-mgmt.selectorLabels" . | nindent 8 }}
    spec:
      {{ include "policy-mgmt.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "policy-mgmt.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.global.database.postgres.installed }}
      - name: wait-for-postgres
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=postgres"
      {{- end }}
      containers:
        - name: policy-mgmt
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          {{- if .Values.command }}
          command:
            {{- toYaml .Values.command | nindent 12 }}
           {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: policy-mgmt
          ports:
            - name: http
              containerPort: {{.Values.service.port}}
              protocol: TCP
          env:
            {{- include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "EVENTS_CONFIG_REDIS_USERNAME" "passwordVariableName" "APP_EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.renderSecretsAsEnvironmentVariables" (dict "ctx" $) | indent 12}}
            {{- if .Values.global.database.postgres.installed }}
            - name: APP_DATABASE_USER
              value: postgres
            - name: APP_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresPassword.name }}
                  key: {{ .Values.postgresPassword.key }}
            {{- else if .Values.global.database.postgres.secretName }}
            - name: APP_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.database.postgres.secretName }}
                  key: {{ .Values.global.database.postgres.userKey }}
            - name: APP_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.database.postgres.secretName }}
                  key: {{ .Values.global.database.postgres.passwordKey }}
            {{- end }}
            - name: APP_DATABASE_DATASOURCE
              value: {{- include "policy-mgmt.postgresConnection" (dict "context" $) }}
          volumeMounts:
          {{- include "harnesscommon.mountRenderedSecretsAsVolumeMounts" (dict "ctx" $) | indent 12}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- include "harnesscommon.renderSecretsAsVolumes" (dict "ctx" $) | indent 8 }}
